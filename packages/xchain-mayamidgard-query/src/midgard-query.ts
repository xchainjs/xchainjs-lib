import { Network } from '@xchainjs/xchain-client'
import { MemberDetails, PoolDetail, PoolStatsDetail } from '@xchainjs/xchain-mayamidgard'
import { Asset, assetToString } from '@xchainjs/xchain-util'

import { MidgardCache } from './midgard-cache'
import { ActionHistory, GetActionsParams, MAYANameDetails, ReverseMAYANames } from './types'

/**
 * Class for retrieving data and processing it from the Midgard API using MidgardCache to optimize the number of requests (MAYAChain L2 API).
 */
export class MidgardQuery {
  private midgardCache: MidgardCache

  /**
   * Constructor to create a MidgardQuery instance.
   * @param midgardCache - An instance of the MidgardCache (could be pointing to stagenet, testnet, mainnet).
   * @returns MidgardQuery
   */
  constructor(midgardCache = new MidgardCache()) {
    this.midgardCache = midgardCache
  }

  /**
   * Retrieves the latest block height using the Health endpoint within Midgard.
   * @returns The latest block height.
   */
  public async getLatestBlockHeight(): Promise<number> {
    const health = await this.midgardCache.midgardApi.getHealth()
    return +health.scannerHeight
  }

  /**
   * Retrieves the list of pools.
   * @returns An array containing details for a set of pools.
   */
  public async getPools(): Promise<PoolDetail[]> {
    return this.midgardCache.getPools()
  }

  /**
   * Retrieves the pool details for a specific asset.
   * @param asset - The asset for which pool details are requested.
   * @returns Details of the selected pool.
   * @throws {Error} If the pool for the asset cannot be found.
   */
  public async getPool(asset: Asset): Promise<PoolDetail> {
    const pools = await this.midgardCache.getPools()
    const assetStringify = assetToString(asset)
    const pool = pools.find((pool) => pool.asset === assetStringify)
    if (!pool) {
      throw new Error(`Can't find pool for asset: ${asset}`)
    }
    return pool
  }

  /**
   * Retrieves pool statistics for a particular asset.
   * @param asset - The asset string to query its pool stats.
   * @returns Pool statistics details.
   */
  public async getPoolStats(asset: Asset): Promise<PoolStatsDetail> {
    return this.midgardCache.midgardApi.getPoolStats(assetToString(asset))
  }

  /**
   * Retrieves MAYAName details.
   * @param mayaName - The MAYAName.
   * @returns An array of chains and their addresses associated with the given MAYAName.
   */
  public async getMAYANameDetails(mayaName: string): Promise<MAYANameDetails | undefined> {
    return this.midgardCache.midgardApi.getMayaNameDetails(mayaName)
  }

  /**
   * Performs a reverse lookup to get MAYAName(s) associated with the given address.
   * @param address - The address to check for associated MAYAName(s).
   * @returns An array of MAYAName(s) associated with the given address.
   */
  public async getMAYANameReverseLookup(address: string): Promise<ReverseMAYANames | undefined> {
    return this.midgardCache.midgardApi.getMAYANameReverseLookup(address)
  }

  /**
   * Retrieves member details.
   * @param address - The member address.
   * @returns An array of statistics for all the liquidity providers associated with a given member address.
   */
  public getMemberDetails(address: string): Promise<MemberDetails> {
    return this.midgardCache.midgardApi.getMemberDetails(address)
  }

  /**
   * Gets the network MidgardQuery is working with.
   * @returns The network.
   */
  public getNetwork(): Network {
    return this.midgardCache.midgardApi.network
  }

  /**
   * List actions along with their related transactions. An action is generated by one or more inbound transactions
   * with the intended action set in the transaction memo. The action may result in one or more outbound transactions.
   * Results are paginated by sets of 50. Filters may be applied to query actions.
   *
   * @param {GetActionsParams} params - Get actions params
   * @param {string} params.address - Comma separated list. Address of sender or recipient of any in/out transaction
   * related to the action.
   * @param {string} params.txid - ID of any in/out tx related to the action
   * @param {string} params.asset - Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL) Additionally,
   * synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
   * @param {ActionType} params.type - One or more comma separated unique types of action (swap, addLiquidity, withdraw,
   * donate, refund, switch)
   * @param {string} params.affiliate - Comma separated list. Affiliate address of the action (swap, refund)
   * @param {number} params.limit - Number of actions returned, default is 50
   * @param {number} params.offset - Pagination offset, default is 0
   * @param {number} params.nextPageToken - If this is given, the actions for the next page will be given
   * @param {number} params.timestamp - If this is given, the actions older than the timestamp will be given
   * @param {number} params.height - If this is given, the actions older than the height will be given
   * @param {number} params.prevPageToken - If this is given, the actions for the previous page will be given
   * @param {number} params.fromTimestamp - If this is given, the actions newer than the timestamp will be given
   * @param {number} params.fromHeight - If this is given, the actions newer than the height will be given
   *
   * @returns {ActionHistory} Array of actions for the given filters
   */
  public async getActions({
    address,
    txid,
    asset,
    type,
    affiliate,
    limit,
    offset,
    nextPageToken,
    timestamp,
    height,
    prevPageToken,
    fromTimestamp,
    fromHeight,
  }: GetActionsParams): Promise<ActionHistory> {
    return this.midgardCache.midgardApi.getActions({
      address,
      txid,
      asset,
      type,
      affiliate,
      limit,
      offset,
      nextPageToken,
      timestamp,
      height,
      prevPageToken,
      fromTimestamp,
      fromHeight,
    })
  }
}
